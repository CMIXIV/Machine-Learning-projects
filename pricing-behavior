#this is a task project that got me current work. the task was to describe the pricing behavior of an FMCG category in as much needed detail as possible

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
import sklearn.linear_model
import sklearn.ensemble
import seaborn as sns
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
from sklearn import tree
import xgboost as xgb
from sklearn.feature_selection import SelectFromModel
%matplotlib inline

#analysing the market sales by price point - partitioning
prices = pd.read_excel("analysis.xlsx")
print(prices.head())
print(prices.info())
prices.drop(['Unnamed: 8'], axis = 1, inplace = True)
np.mean(prices['discprice'])
np.median(prices['discprice'])
plt.hist(prices['discprice'],bins=35)
plt.show()

#analysing performance of top100 SKUs
skus = pd.read_excel("skus_top100.xlsx")
print(skus.head())
print(skus.info())
plt.scatter(skus['discprice'],skus['amount'],s=skus['share']*50)
plt.xlabel('Price per item')
plt.ylabel('Sales items')
plt.show()

#analysing promo pressure 
promo = pd.read_excel("promo.xlsx")
print(promo.head())
print(promo.info())
plt.scatter(promo['Discounted'],promo['Total'])
plt.xlabel('Volume on deal')
plt.ylabel('Sales items')
plt.show()

#building the predictive model for total category sales - linear regression
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
import sklearn.linear_model
import sklearn.ensemble
import seaborn as sns
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
daily = pd.read_excel("byday.xlsx")
print(daily.head())
print(daily.info())
predictors =['avgprice','ondeal','avail']
x_train=daily[predictors].values
y_train = daily['amount'].values
# Create linear regression object
linear = sklearn.linear_model.LinearRegression()
# Train the model using the training sets and check score
linear.fit(x_train, y_train)
linear.score(x_train, y_train)
#Equation coefficient and Intercept
print('Coefficient: \n', linear.coef_)
print('Intercept: \n', linear.intercept_)
predictors =['avgprice','ondeal']
x_train=daily[predictors].values
y_train = daily['amount'].values
# Create linear regression object
linear = sklearn.linear_model.LinearRegression()
# Train the model using the training sets and check score
linear.fit(x_train, y_train)
linear.score(x_train, y_train)
#Equation coefficient and Intercept
print('Coefficient: \n', linear.coef_)
print('Intercept: \n', linear.intercept_)

#building the predictive model for total category sales - xgboost
final_core = pd.read_excel("final_core.xlsx")
print(final_core.head())
print(final_core.info())
from sklearn import tree
from sklearn.datasets import make_blobs
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import cross_val_score
from sklearn.metrics import roc_auc_score
predictors =['discount','discprice','discprice_13920','discprice_13922',
            'discprice_13923','discprice_8517','discprice_8519','discprice_8521','discprice_17596',
            'discprice_2796','discprice_2797','discprice_2798','discprice_2799','discprice_516','discprice_517',
            'discprice_518','discprice_233','discprice_483','discprice_384']
X, y = final_core[predictors], final_core['amount']
X_train, X_test, y_train, y_test= train_test_split(X, y, test_size=0.2, random_state=123)
xg_cl=xgb.XGBClassifier(objective='binary:logistic',n_estimators=10,seed=123)
xg_cl.fit(X_train, y_train)
preds=xg_cl.predict(X_test)
accuracy = float(np.sum(preds==y_test))/y_test.shape[0]
print("accuracy: %f" % (accuracy))
print(xg_cl.feature_importances_)
print(roc_auc_score(y_test, xg_cl.predict_proba(X_test)[:,1]))
